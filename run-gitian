#!/bin/sh

if [ ! -f "`dirname "$0"`/vendor/gitian-builder/bin/gbuild" ]; then
    echo "Gitian-builder not found, please update submodule" 1>&2
    exit 1
fi

cd "`dirname "$0"`/vendor/gitian-builder"
export PATH="$PATH:`pwd`/bin:`pwd`/libexec"

if ! `gbuild --help 1>/dev/null`; then # check if gbuild works
    exit 1
fi

usage() {
    echo "Usage:\t$0 [-b | -s KEY_ID | -v] [-O linux|win|osx] VERSION [builder-options]"
    echo "\t$0 [-O linux|win|osx] KEY_ID VERSION [builder-options]"
    echo "\t$0 --help"
    echo ""
    echo "-b\tbuild"
    echo "-s\tsign"
    echo "-v\tverify"
    echo "\t(will build and sign with KEY_ID if neither option is present)"
    echo "-O\tchoose target operating system linux or win, defaults to linux"
    echo "--help\tdisplay this help and exit"
    echo ""
    echo "KEY_ID\tis the GPG key ID to use for signing"
    echo "VERSION\tis the BitShares release version to build, sign or verify"
    echo ""
    echo "builder-options:"
    gbuild --help 2>&1 | tail -n +2
    echo ""
    echo "You should allow at least 4G RAM for the build (-m 4096), more if"
    echo "you want to build with more than one core!"
}

if [ "$1" = "--help" ]; then
    usage; exit 0
fi

if [ "$#" -lt 1 ]; then
    usage 1>&2; exit 1
fi

set -e

BUILD=
SIGN=
VERIFY=
OS=linux
while [ "$1" = "-b" -o "$1" = "-s" -o "$1" = "-v" -o "$1" = "-O" ]; do
    case "$1" in
      -b) BUILD=1; ;;
      -s) SIGN=1;
          if [ -z "$2" ]; then
              echo "Missing argument to -s" 1>&2
              exit 1
          fi
          KEY_ID="$2"; shift; ;;
      -v) VERIFY=1; ;;
      -O) if [ -z "$2" ]; then
              echo "Missing argument to -O" 1>&2
              exit 1
          fi
          OS="$2"; shift; ;;
    esac
    shift
done

case "$OS" in
    linux|win|osx) true; ;;
    *) echo "Unsupported OS '$OS', try 'linux', 'osx' or 'win' instead!" 1>&2
       exit 1
       ;;
esac

if [ -z "$BUILD$SIGN$VERIFY" ]; then
    BUILD=1
    SIGN=1
    if [ "$#" -lt 1 ]; then
        usage 1>&2; exit 1
    fi
    KEY_ID="$1"
    shift
fi

if [ "$#" -lt 1 ]; then
    usage 1>&2; exit 1
fi

VERSION="$1"
shift

mkdir -p var
mkdir -p inputs

if [ -n "$BUILD" ]; then
    if [ "$OS" = "osx" ]; then
        if [ ! -r inputs/MacOSX10.15.sdk.tar.xz ]; then
            echo "Please download MacOSX10.15.sdk.tar.xz and place it in `pwd`/inputs." 1>&2
            echo "Also be sure to read and understand Apple's licensing terms." 1>&2
            exit 1
        fi
    fi

    tar cfz inputs/supplement.tar.gz --sort=name -C ../.. supplement

    (
        echo https://www.openssl.org/source/openssl-1.1.1p.tar.gz bf61b62aaa66c7c7639942a94de4c9ae8280c08f17d4eac2e44644d9fc8ace6f
        if [ "$OS" = "win" -o "$OS" = "osx" ]; then
            cat <<_EOL_
https://boostorg.jfrog.io/artifactory/main/release/1.69.0/source/boost_1_69_0.tar.bz2 8f32d4617390d1c2d16f26a27ab60d97807b35440d45891fa340fc2648b04406
https://zlib.net/zlib-1.2.13.tar.gz b3a24de97a8fdbc835b9833169501030b8977031bcb54b3b3ac13740f846ab30
_EOL_
        fi
        if [ "$OS" = "osx" ]; then
            cat <<_EOL_
https://curl.se/download/curl-7.76.1.tar.xz 64bb5288c39f0840c07d077e30d9052e1cbb9fa6c2dc52523824cc859e679145
https://github.com/tpoechtrager/osxcross/archive/e0a171828a72a0d7ad4409489033536590008ebf.tar.gz 7ef00c27b76745d4b44e13f291df60318588aa7b5d1788aeba5aca569ac7e989
_EOL_
        else
            echo https://curl.se/download/curl-7.83.1.tar.xz 2cb9c2356e7263a1272fd1435ef7cdebf2cd21400ec287b068396deb705c22c4
        fi
    ) | while read url sha; do
        FILE="${url##*/}"
        if [ ! -r "inputs/$FILE" ]; then
            echo "Downloading $FILE..."
            ( cd inputs; curl -LO "$url" )
        fi
        sha256sum "inputs/$FILE" \
          | grep -q "$sha" \
          || ( echo "inputs/$FILE is wrong!?" 1>&2 && exit 1 )
      done
fi

[ -z "$BUILD" ]  || (
    rm -rf inputs/bitshares
    gbuild "../../descriptors/bitshares-core-$OS.yml" -c bitshares="$VERSION" "$@"
)
[ -z "$SIGN" ]   || gsign --signer "$KEY_ID" --destination ../../signatures --release "$VERSION"-"$OS" \
                          "../../descriptors/bitshares-core-$OS.yml"
[ -z "$VERIFY" ] || gverify --destination ../../signatures --release "$VERSION"-"$OS" \
                            "../../descriptors/bitshares-core-$OS.yml"
